name: Run Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27018:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 40s

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
          - 9200:9200
          - 9300:9300
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 60s
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for MongoDB
      run: |
        timeout 60 bash -c 'until nc -z localhost 27018; do sleep 1; done'
        echo "MongoDB is ready"

    - name: Initialize MongoDB Replica Set
      run: |
        mongosh --port 27018 --eval "
          try {
            rs.initiate({
              _id: 'rs0',
              members: [{ _id: 0, host: 'localhost:27018' }]
            });
            print('Replica set initiated');
          } catch(e) {
            if (e.code === 23) {
              print('Replica set already initiated');
            } else {
              throw e;
            }
          }
        "
        sleep 5

    - name: Wait for Elasticsearch
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'
        echo "Elasticsearch is ready"

    - name: Set up database
      run: npx prisma db push
      env:
        DATABASE_URL: mongodb://localhost:27018/sailingLoc?replicaSet=rs0

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: mongodb://localhost:27018/sailingLoc?replicaSet=rs0
        ELASTICSEARCH_URL: http://localhost:9200

    - name: Run Jest tests
      run: npm run test:jest
      env:
        NODE_ENV: test
        DATABASE_URL: mongodb://localhost:27018/sailingLoc?replicaSet=rs0
        ELASTICSEARCH_URL: http://localhost:9200